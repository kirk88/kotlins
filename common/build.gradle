plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'maven-publish'
}

android {
    compileSdk versions.compileSdk

    defaultConfig {
        minSdk versions.minSdk
        targetSdk versions.targetSdk
    }

    buildFeatures{
        viewBinding true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += ['-Xopt-in=kotlin.RequiresOptIn']
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

}

dependencies {
    api deps.kotlinStdlib
    api deps.kotlinxCoroutinesCore
    api deps.kotlinxCoroutinesAndroid
    api deps.kotlinLifecycleViewmodelKtx
    api deps.kotlinLifecycleViewmodelSavedstate
    api deps.kotlinLifecycleRuntime
    api deps.kotlinLifecycleLivedata
    api deps.androidxCoreKtx
    api deps.androidxActivityKtx
    api deps.androidxFragmentKtx
    api deps.androidxSetup
    api deps.androidxAppcompat
    api deps.androidxRecyclerview
    api deps.androidxConstraintlayout
    api deps.androidxRefreshLayout
    api deps.androidxDatastorePreferences
    api deps.androidxDatastoreCore
    api deps.androidxMultidex
    api deps.material
    api(deps.coil){
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
        exclude group: 'com.squareup.okio', module: 'okio'
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.convention("sources")
    archiveClassifier.set("sources")
    from android.sourceSets.main.java.getSrcDirs()
}

def versionMajor = 1
def versionMinor = 0
def versionPatch = 3

publishing {
    publications {
        production(MavenPublication) {
            groupId "com.nice.kotlins"
            artifactId "common"
            version "${versionMajor}.${versionMinor}.${versionPatch}"

            afterEvaluate { artifact(tasks.getByName("bundleReleaseAar")) }

            artifact androidSourcesJar

            pom.withXml {
                def dependenciesNode = asNode().appendNode("dependencies")
                configurations.implementation.allDependencies.each { dependency ->
                    def dependencyNode = dependenciesNode.appendNode("dependency")
                    dependencyNode.appendNode("groupId", dependency.group)
                    dependencyNode.appendNode("artifactId", dependency.name)
                    dependencyNode.appendNode("version", dependency.version)
                }
            }
        }
    }
    repositories {
        def deployPath = file(getProperty('aar.deployPath'))
        maven { url "file://${deployPath.absolutePath}" }
    }
}